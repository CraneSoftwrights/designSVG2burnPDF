name: Build artefacts and release on every push

on: 
  push:
    branches:
      - '**'

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Create subdirectories
        run: |
          mkdir -p utilities/xslstyle
          mkdir -p utilities/saxon655
  
      - name: Fetch xslstyle.xsl from CraneSoftwrights
        run: |
          git clone --depth 1 https://github.com/CraneSoftwrights/xslstyle.git temp-repo
          cp -r temp-repo/* utilities/xslstyle
          rm -rf temp-repo


      - name: Fetch Saxon 6.5.5
        run: |
          curl -L -o saxon.zip https://github.com/Saxonica/Saxon-Archive/raw/main/Saxon-6/6.5.5/saxon6-5-5.zip
          unzip saxon.zip -d utilities/saxon655
          mv utilities/saxon655/saxon6-5-5/saxon.jar utilities/saxon655/saxon.jar                  
      - name: Set environment variables
        run: |
          # Define the release version using UTC in the format CCMMYYDD-HHMMZ
          echo "RELEASE_VERSION=$(date -u +'%C%y%m%d-%H%MZ')" >> $GITHUB_ENV
          echo "BRANCH_NAME=${GITHUB_REF##*/}" >> $GITHUB_ENV
          echo "COMMIT_HASH_SHORT=$(echo ${{ github.sha }} | cut -c1-8)" >> $GITHUB_ENV
                    
      - name: Set up Git
        run: |
          # ensure GitHub/Repository/Settings/Actions/General/ActionsPermissions is allow all actions
          # ensure GitHub/Repository/Settings/Actions/General/WorkflowPermissions is read/write
          # 
          git config --global user.name 'github-actions'
          git config --global user.email 'github-actions@github.com'

      - name: Create documentation
        run: |
          echo > makedoc.log.txt
          bash makedoc.sh | tee -a makedoc.log.txt
          echo >> makedoc.log.txt
          echo Branch:  $BRANCH_NAME >> makedoc.log.txt
          echo Release: $RELEASE_VERSION >> makedoc.log.txt

      - name: Create action result ZIP
        run: |
          echo RELEASE_VERSION=${{ env.RELEASE_VERSION }}
          echo BRANCH_NAME=${{ env.BRANCH_NAME }}
          mkdir   download
          cp makedoc.log.txt download
          # compose README file
          cp      outputs-readme.txt \
                  download/README-crane-designSVG2burnFiles--${{ env.RELEASE_VERSION }}-${{ env.BRANCH_NAME }}-${{ env.COMMIT_HASH_SHORT }}.txt
          echo  >>download/README-crane-designSVG2burnFiles--${{ env.RELEASE_VERSION }}-${{ env.BRANCH_NAME }}-${{ env.COMMIT_HASH_SHORT }}.txt crane-designSVG2burnFiles--${{ env.RELEASE_VERSION }}-${{ env.BRANCH_NAME }}-${{ env.COMMIT_HASH_SHORT }}
          # package up everything except README
          zip -r         download/crane-designSVG2burnFiles--${{ env.RELEASE_VERSION }}-${{ env.BRANCH_NAME }}-${{ env.COMMIT_HASH_SHORT }}.zip *.xsl *.html
          # add README without the directory prefix
          cd             download
          zip -r                  crane-designSVG2burnFiles--${{ env.RELEASE_VERSION }}-${{ env.BRANCH_NAME }}-${{ env.COMMIT_HASH_SHORT }}.zip \
                           README-crane-designSVG2burnFiles--${{ env.RELEASE_VERSION }}-${{ env.BRANCH_NAME }}-${{ env.COMMIT_HASH_SHORT }}.txt
          # remove the README file in order to test the ZIP
          rm               README-crane-designSVG2burnFiles--${{ env.RELEASE_VERSION }}-${{ env.BRANCH_NAME }}-${{ env.COMMIT_HASH_SHORT }}.txt
          # test the ZIP by unzipping it
          unzip                   crane-designSVG2burnFiles--${{ env.RELEASE_VERSION }}-${{ env.BRANCH_NAME }}-${{ env.COMMIT_HASH_SHORT }}.zip
                  
      - name: Upload artefacts for action 
        uses: actions/upload-artifact@v4
        with:
          name: crane-designSVG2burnFiles--${{ env.RELEASE_VERSION }}-${{ env.BRANCH_NAME }}-${{ env.COMMIT_HASH_SHORT }}
          path: |
            download/*
            !download/crane-designSVG2burnFiles--${{ env.RELEASE_VERSION }}-${{ env.BRANCH_NAME }}-${{ env.COMMIT_HASH_SHORT }}.zip

      - name: Upload artefacts for action - log file
        uses: actions/upload-artifact@v4
        with:
          name: makedoc.log.txt
          path: |
            makedoc.log.txt

      - name: Commit changes
        if: success()
        run: |
          git add .
          if ! git diff-index --quiet HEAD --; then
            git commit -m "Update documentation from push action"
            NEW_COMMIT_SHA=$(git rev-parse HEAD)
            echo "NEW_COMMIT_SHA=$NEW_COMMIT_SHA" >> $GITHUB_ENV
            git push
          else
            echo "No changes to documentation to be committed"
            NEW_COMMIT_SHA=""
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Wait for push to complete
        if: success()
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NEW_COMMIT_SHA: ${{ env.NEW_COMMIT_SHA }}
        run: |
          OWNER=$(echo $GITHUB_REPOSITORY | cut -d'/' -f1)
          REPO=$(echo $GITHUB_REPOSITORY | cut -d'/' -f2)
          if [ -n "$NEW_COMMIT_SHA" ]; then
            for i in {2..10}; do
              sleep $((2**i))
              if gh api repos/$OWNER/$REPO/commits/$NEW_COMMIT_SHA --silent; then
                echo "Push completed"
                break
              else
                echo "Push not yet completed. Retrying in $((2**i)) seconds..."
              fi
            done
          else
            echo "No new commit was created. Skipping wait for push."
          fi
          
      - name: Install GitHub CLI
        if: ${{ success() && (github.ref == 'refs/heads/main') }}
        run: sudo apt-get install -y gh

      - name: Create GitHub Release
        if: ${{ success() && (github.ref == 'refs/heads/main') }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Create the release
          gh release create "${{ env.RELEASE_VERSION }}-${{ env.BRANCH_NAME }}-${{ env.COMMIT_HASH_SHORT }}" --title "Release ${{ env.RELEASE_VERSION }}-${{ env.BRANCH_NAME }}-${{ env.COMMIT_HASH_SHORT }}" --notes "Automated release created by GitHub Actions."

      - name: Attach artefacts to the release
        if: ${{ success() && (github.ref == 'refs/heads/main') }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release upload "${{ env.RELEASE_VERSION }}-${{ env.BRANCH_NAME }}-${{ env.COMMIT_HASH_SHORT }}" download/crane-designSVG2burnFiles--${{ env.RELEASE_VERSION }}-${{ env.BRANCH_NAME }}-${{ env.COMMIT_HASH_SHORT }}.zip makedoc.log.txt
